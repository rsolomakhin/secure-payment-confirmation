<pre class="metadata">
Title: Secure Payment Confirmation
Shortname: secure-payment-confirmation
Repository: w3c/secure-payment-confirmation
TR: https://www.w3.org/TR/secure-payment-confirmation/
ED: https://w3c.github.io/secure-payment-confirmation/
Prepare for TR: true
Inline Github Issues: true
Group: web-payments
Status: w3c/ED
Level: 1
URL: https://w3c.github.io/secure-payment-confirmation
Editor: Rouslan Solomakhin, Google https://www.google.com/, rsolomakhim@chromium.org
Editor: Stephen McGruer, Google https://www.google.com/, smcgruer@chromium.org
Abstract: This specification describes data structures, formats, algorithms, and
  processing models to facilitate [[webauthn-3]] based payments on the Web.
Complain About: accidental-2119 true, missing-example-ids true
Markup Shorthands: markdown yes 
</pre>

<pre class="anchors">
spec: credential-management-1; urlPrefix: https://w3c.github.io/webappsec-credential-management/
    type: dfn
        text: same-origin with its ancestors; url: same-origin-with-its-ancestors

spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: dfn
        url: sec-object-internal-methods-and-internal-slots
            text: internal slot
            text: internal method
</pre>

<div class="non-normative">

# Introduction # {#sctn-intro}

*This section and its sub-sections are non-normative.*

This specification defines dictionaries and "[=secure-payment-confirmation=]"
payment method for use, for instance, with [[webauthn-3]] and
[[payment-request]]. With it, merchants can request a signature over
transaction details to be verified by the issuing bank.

This specification describes two flows: enrollment and payment
authorization.

This specification relies on the use of the {{PublicKeyCredential}} from
[[webauthn-3]].

</div> <!-- non-normative -->

# Enrollment # {#sctn-enrollment}

To enroll a new payment instrument, relying parties can use
{{CredentialsContainer/create()|navigator.credentials.create()}}, which must
display a prompt to the user.

## <dfn interface>PaymentCredential</dfn> Interface ## {#sctn-paymentcredential-interface}

<div class="note">
Note: Preferably we would just use PublicKeyCredential, and have this be
identical to WebAuth create. That would require us to have a `[[type]]` of
"public-key" however, as the type has to be the same for all objects of a
single interface (spec'd in credential-management-1).

Having a separate interface does also make it easier to monkey patch the
algorithms, as we're technically modifying a *copy* rather than the original
and so don't have to make the modifications work for vanilla WebAuthn.
</div>

The {{PaymentCredential}} interface inherits from {{PublicKeyCredential}}
[[webauthn-3]], to provide a different {{Credential/[[type]]}}, and to
more easily modify the algorithms to match the requirements of Secure
Payment Confirmation.

<xmp class="idl">
    [SecureContext, Exposed=Window]
    interface PaymentCredential : PublicKeyCredential {
    };
</xmp>

<dl dfn-type="attribute" dfn-for="PaymentCredential">
    :  <dfn>\[[type]]</dfn>
    :: The {{PaymentCredential}} [=interface object=]'s {{Credential/[[type]]}} [=internal slot=]'s value is the string "`payment`".
</dl>

{{PaymentCredential}}'s [=interface object=] inherits {{PublicKeyCredential}}'s implementation of
{{PublicKeyCredential/[[CollectFromCredentialStore]](origin, options,
sameOriginWithAncestors)}} and {{PublicKeyCredential/[[Store]](credential, sameOriginWithAncestors)}},
and defines its own implementation of {{PaymentCredential/[[Create]](origin, options,
sameOriginWithAncestors)}} and \{{PaymentCredential/[[DiscoverFromExternalSource]](origin, options,
sameOriginWithAncestors)}}.
</section>

### `CredentialCreationOptions` Dictionary Extension ### {#sctn-credentialcreationoptions-extension}

Note: We would prefer to reuse PublicKeyCredentialCreationOptions, to keep
things closer to WebAuthn. However currently Chrome shows a browser UX during
SPC enrollment that includes payment information - which has to be passed in
somehow.

To support registration via
{{CredentialsContainer/create()|navigator.credentials.create()}}, this document
extends the {{CredentialCreationOptions}} dictionary as follows:

<xmp class="idl">
    partial dictionary CredentialCreationOptions {
        PaymentCredentialCreationOptions payment;
    };
</xmp>

<dl dfn-type="attribute" dfn-for="CredentialCreationOptions">
    :  payment member
    :: The parameters for enrollment of a new {{PublicKeyCredential}} for payments.
</dl>

### Create a New Credential - PaymentCredential's `[[Create]](origin, options, sameOriginWithAncestors)` Method ### {#sctn-createCredential}

{{PaymentCredential}}'s [=interface object=]'s implementation of the <dfn
for="PaymentCredential" method>\[[Create]](origin, options,
sameOriginWithAncestors)</dfn> [=internal method=] [[!CREDENTIAL-MANAGEMENT-1]]
allows the creation of [[webauthn-3]] credentials in a payments context. To
support standard payment flows, {{PaymentCredential}} allows creating a
credential in a cross-origin iframe.

Note: **TODO:** Link to use-cases

This [=internal method=] accepts three arguments:

<dl dfn-type="argument" dfn-for="PaymentCredential/[[Create]](origin, options, sameOriginWithAncestors)">

    :   <dfn>origin</dfn>
    ::  This argument is the [=relevant settings object=]'s [=environment settings object/origin=], as determined by the
        calling {{CredentialsContainer/create()}} implementation.

    :   <dfn>options</dfn>
    ::  This argument is a {{CredentialCreationOptions}} object whose
        `\|options|.{{CredentialCreationOptions/payment}}` member contains a {{PaymentCredentialCreationOptions}}
        object specifying the desired attributes of the to-be-created \[=public key credential=].

    :   <dfn>sameOriginWithAncestors</dfn>
    ::  This argument is a Boolean value which is `true` if and only if the caller's [=environment settings object=] is
        [=same-origin with its ancestors=]. It is `false` if caller is cross-origin.

        Note: Invocation of this [=internal method=] indicates that it was allowed by
        [=permissions policy=], which is evaluated at the [[!CREDENTIAL-MANAGEMENT-1]] level.
        See [[#sctn-permissions-policy]].

</dl>

Note: This algorithm is currently written quite loosely, whilst we narrow down
how we want the spec to work.

When this method is invoked, the user agent MUST execute the following algorithm:

1. Optionally, the user agent MAY return a return a {{"NotAllowedError"}} {{DOMException}}.

    Note: This step allows the user agent to implement a browser UX gating enrollment.

1. Let |options| be the value of `|options|.`{{CredentialCreationOptions/payment}}.

1. Create a {{PublicKeyCredentialCreationOptions}} dictionary, |publicKeyOpts|, with:

    1. `user.name` set to `options.instrument.displayName`
    1. `user.id` set to a random 32-byte buffer
    1. `user.displayName` set to `options.instrument.displayName`
    1. `authenticatorSelection.authenticatorAttachment` set to {{AuthenticatorAttachment/platform}}.
    1. `authenticatorSelection.residentKey` set to {{ResidentKeyRequirement/required}}.
    1. `authenticatorSelection.userVerification` set to {{UserVerificationRequirement/discouraged}}.
    1. All other members set to their value from |options|.

1. Create a {{CredentialRequestOptions}} dictionary, |credOpts|, with publicKey set to |publicKeyOpts|.

1. Perform the same steps as {{PublicKeyCredential/[[Create]](origin, options,
    sameOriginWithAncestors)|PublicKeyCredential.[[Create]]}}, passing in *origin*, |credOpts|, and
    |sameOriginWithAncestors|, except:

    - Replace step 2 with:

        If |sameOriginWithAncestors| is `false` and the "`payments`" permission
        policy is not set, return a "{{NotAllowedError}}" {{DOMException}}.

    - In step 13, set the {{CollectedClientData/type}} to "`payment.create`".

    - In the success case, create a {{PaymentCredential}} rather than a
        {{PublicKeyCredential}}.

1. Store the returned credential in some user-agent specific way.

    Note: It is probably not needed to specify this last step, but it is worth
    nothing that Chrome currently does this.

## Options for Credential Creation (dictionary <dfn dictionary>PaymentCredentialCreationOptions</dfn>) ## {#dictionary-makecredentialoptions}

<xmp class="idl">
    dictionary PaymentCredentialCreationOptions {
        required PublicKeyCredentialRpEntity rp;
        required sequence<PublicKeyCredentialParameters> pubKeyCredParams;
        required BufferSource challenge;
        required PaymentCredentialInstrument instrument;
        unsigned long timeout;
    };
</xmp>

The {{PaymentCredentialCreationOptions}} dictionary contains the [[webauthn-3]]
{{PublicKeyCredentialRpEntity}} and {{PublicKeyCredentialParameters}} (as well
as the `challenge` and `timeout` fields) for creating a
{{PublicKeyCredential}}.

<dl dfn-type="attribute" dfn-for="PaymentCredentialCreationOptions">
    :  rp member
    :: The information about the relying party, as defined in [[webauthn-3]].

    :  pubKeyCredParams member
    :: The parameters for creating the {{PublicKeyCredential}} as defined in [[webauthn-3]].

    :  challenge member
    :: A random one-time challenge that the relying party typically generated on the server side to prevent replay attacks.

    :  instrument member
    :: The instrument information to display during enrollment.

    :  timeout member
    :: The number of milliseconds before the request to create the credential times out. At most 1 hour.
</dl>

# Payment Authorization # {#sctn-payment-authorization}

To sign over transaction details, create a new {{PaymentRequest}} object as
described in [[payment-request]] with a single {{PaymentMethodData}}, no
`displayItems`, and no `options`. Set the
{{PaymentMethodData/supportedMethods|PaymentMethodData.supportedMethods}} to
"[=secure-payment-confirmation=]" and set
{{PaymentMethodData/data|PaymentMethodData.data}} to
{{SecurePaymentConfirmationRequest}}.

Calling {{PaymentRequest/show()|PaymentRequest.show()}} must prompt the user to
confirm the transaction details.

## Payment Method Identifier ## {#sctn-payment-method-identifier}

The [[payment-request]] uses a [=payment method identifier=] from
[[payment-method-id]] to identify a payment flow. The [=standardized payment
method identifier=] for this specification is
"<dfn>secure-payment-confirmation</dfn>".

## Input for Payment Authorization ## {#sctn-payment-authorization-input}

The following section describes the input data structure for signing over
transaction details.

### <dfn dictionary>SecurePaymentConfirmationRequest</dfn> Dictionary ### {#sctn-securepaymentconfirmationrequest-dictionary}

<xmp class="idl">
    dictionary SecurePaymentConfirmationRequest {
        required BufferSource challenge;
        required FrozenArray<BufferSource> credentialIds;
        required PaymentCredentialInstrument instrument; 
        unsigned long timeout;
    };
</xmp>

The {{SecurePaymentConfirmationRequest}} dictionary contains the following
members:

<dl dfn-type="attribute" dfn-for="SecurePaymentConfirmationRequest">
    :  challenge member
    :: A random one-time challenge that the relying party generates on the server side to prevent replay attacks.

    :  credentialIds member
    :: The list of credential identifiers for the given instrument.

    :  instrument member
    :: The description of the instrument name and icon to display during enrollment and to be signed along with the transaction details.

    :  timeout member
    :: The number of milliseconds before the request to sign the transaction details times out. At most 1 hour.
</dl>

## Output of Payment Authorization ## {#sctn-payment-authorization-output}

The output of a successful payment authorization is a [[payment-request]]
{{PaymentResponse}} with:

- `methodName` set to "[=secure-payment-confirmation=]".
- `details` set to the [[webauthn-3]] {{PublicKeyCredential}}.
- `details.type` set to "`payment`".
- {{CollectedClientPaymentData}} in the `details.response.clientDataJson` field.
- `details.response.clientDataJson.type` set to "`payment.get`".

### <dfn dictionary>CollectedClientPaymentData</dfn> Dictionary ### {#sctn-collectedclientpaymentdata-dictionary}

<xmp class="idl">
    dictionary CollectedClientPaymentData : CollectedClientData {
        required CollectedClientAdditionalPaymentData payment;
    };
</xmp>

The {{CollectedClientPaymentData}} dictionary inherits from
{{CollectedClientData}} from [[webauthn-3]] with `type` field always set to
"`payment.get`". It contains the following additional field:

<dl dfn-type="attribute" dfn-for="CollectedClientPaymentData">
    :  payment member
    :: The additional payment information to sign.
</dl>

### <dfn dictionary>CollectedClientAdditionalPaymentData</dfn> Dictionary ### {#sctn-collectedclientadditionalpaymentdata-dictionary}

<xmp class="idl">
    dictionary CollectedClientAdditionalPaymentData {
        required USVString rp;
        required USVString topOrigin;
        required PaymentCurrencyAmount total;
        required PaymentCredentialInstrument instrument;
    };
</xmp>

The {{CollectedClientAdditionalPaymentData}} dictionary contains the following
fields:

<dl dfn-type="attribute" dfn-for="CollectedClientAdditionalPaymentData">
    :  rp member
    :: The relying party that created the credential.

    :  topOrigin member
    :: The origin of the top level context that requested to sign the transaction details. Typically this would be called a merchant.

    :  total member
    :: The {{PaymentCurrencyAmount}} of the [[payment-request]] `total` field.

    :  instrument member
    :: The instrument information that was displayed to the user.
</dl>

Note that there is no `paymentRequestOrigin` field in
{{CollectedClientAdditionalPaymentData}}, because the origin of the iframe is
already included in {{CollectedClientData}} of [[webauthn-3]].

# Common Data Structure # {#sctn-common-data-structures}

The following data structure is shared between enrollment and payment
authorization.

## <dfn dictionary>PaymentCredentialInstrument</dfn> Dictionary ## {#sctn-paymentcredentialinstrument-dictionary}

<xmp class="idl">
    dictionary PaymentCredentialInstrument {
        required DOMString displayName;
        required USVString icon;
    };
</xmp>

The {{PaymentCredentialInstrument}} dictionary contains the information to be
displayed to the user and signed together with the transaction details. It
contains the following members:

<dl dfn-type="attribute" dfn-for="PaymentCredentialInstrument">
    :  displayName member
    :: The name of the payment instrument to be displayed to the user.

    :  icon member
    :: The URL of the icon of the payment instrument.
</dl>

# Permissions Policy integration # {#sctn-permissions-policy}

# Security Considerations # {#sctn-security-considerations}

# Privacy Considerations # {#sctn-privacy-considerations}

# Accessibility Considerations # {#sctn-accessibility-considerations}

</div>
